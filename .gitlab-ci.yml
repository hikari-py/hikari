# Copyright Â© Nekoka.tt 2019
#
# This file is part of Hikari.
#
# Hikari is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Hikari is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Hikari. If not, see <https://www.gnu.org/licenses/>.

stages:
  - test
  - verify
  - deploy
  - pages

variables:
  DOCKER_DRIVER: "overlay2"
  RUN_SLOW_TESTS: "true"
  OWNER: "nekokatt"

###
### TEMPLATE TO RUN PYTEST.
###
.pytest:
  allow_failure: false
  stage: test
  script:
    - mkdir public || true
    - tox -avv
    - tox -e ${CI_JOB_NAME}
  artifacts:
    paths:
      - public

###
### TEMPLATE TO INITIALIZE CPYTHON ENVIRONMENTS AND THEN RUN PYTEST.
###
.cpython-pytest:
  stage: test
  extends: .pytest
  before_script:
    - python -V
    - apk add git
    - pip install tox

###
### TEST IN PYTHON 3.6
###
py36:
  image: python:3.6-alpine
  extends: .cpython-pytest

###
### TEST IN PYTHON 3.7
###
py37:
  image: python:3.7-alpine
  extends: .cpython-pytest
  coverage: /^TOTAL[\s\d%]+\s(\d+(?:\.\d+)?\%)$/

###
### TEST IN PYTHON 3.8
###
py38:
  image: python:3.8-rc-alpine
  extends: .cpython-pytest

###
### TEST IN PYTHON 3.9
###
py39:
  image: bash
  script:
    - echo "Image not yet on Docker-Hub. Watch this space."

###
### TEST IN PYPY3.6.
###
pypy3:
  extends: .pytest
  image: pypy:3.6-slim
  before_script:
    - pypy3 -V
    - apt-get update
    - apt-get install git -y
    - pip install tox

###
### FAIL WITH WARNING IF CODE DOES NOT MATCH DESIRED FORMAT.
### This only runs for merge requests.
###
black:
  stage: verify
  allow_failure: false
  image: python:3-alpine
  before_script:
    - pip install tox 
  script:
    - tox -e black-check
  except:
    - master
    - staging

###
### RUN STATIC APPLICATION SECURITY TESTING.
###
bandit:
  stage: verify
  allow_failure: false
  image: python:3-alpine
  before_script:
    - pip install tox
  script:
    - tox -e bandit || true
    - tox -e bandit-report
  artifacts:
    paths:
      - public

###
### VERIFY THAT SETUP.PY IS VALID.
###
setup.py:
  stage: verify
  allow_failure: false
  image: python:3-alpine
  variables:
    GIT_STRATEGY: none
    PACKAGE_SLUG: git+${CI_PROJECT_URL}.git@${CI_COMMIT_REF_NAME}
  before_script:
    - apk add git gcc make
    - pip install -U pip
    - python -V
    - echo "Testing setup.py for ${PACKAGE_SLUG}"
  script:
    - pip install -U ${PACKAGE_SLUG}
    - python -c "import hikari; print(hikari.__version__)"

###
### HANDLE DEPLOYING TO PYPI REPOSITORIES
###
.deploy:
  allow_failure: false
  stage: deploy
  image: python:3
  before_script:
    - pip install poetry
    - poetry install -v
  script:
    - version="$(date +%Y.%m.%d)${PREFIX}"
    - release="$(git show --format='%h' -s)"
    - pep440_version="${version}.${CI_PIPELINE_IID}"
    - echo "Version will become ${pep440_version}, release will be ${release}"
    - sed "s/^__version__.*/__version__ = \"${pep440_version}\"/g" -i hikari/__init__.py
    - sed "s/^__release__.*/__release__ = \"${release}\"/g" -i hikari/__init__.py
    - sed "s/^version.*/version = ${pep440_version}/g" -i setup.cfg
    - sed "0,/^version.*$/s//version = \"${pep440_version}\"/g" -i docs/conf.py
    - sed "0,/^release.*$/s//release = \"${release}\"/g" -i docs/conf.py
    - poetry build
    - poetry publish --username=$PYPI_USER --password=$PYPI_PASS --repository=$PYPI_REPO
    - pip install requests
    - python .ci/notify.py "${pep440_version} (${release})"

###
### HANDLE DEPLOYING TO OUR STAGING ENVIRONMENT ON test.pypi.org
###
deploy-to-staging:
  extends: .deploy
  only:
    - staging
    - $CI_PROJECT_NAMESPACE == $OWNER
  except:
    - tags
    - merge_requests
    - schedules
  variables:
    PREFIX: ".dev"
    RELEASE_WEBHOOK_NAME: "staging"
    RELEASE_WEBHOOK_DESCRIPTION: "You can install this version by running:\n```bash\npip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple\n```\n"
    RELEASE_WEBHOOK_COLOUR: "0xd34615"
  environment:
    name:
      staging
  artifacts:
    paths:
      - docs

###
### HANDLE DEPLOYING TO OUR PRODUCTION ENVIRONMENT ON pypi.org
###
deploy-to-prod:
  extends: .deploy
  only:
    - master
    - $CI_PROJECT_NAMESPACE == $OWNER
  except:
    - tags
    - merge_requests
    - schedules
  variables:
    PREFIX: ""
    RELEASE_WEBHOOK_NAME: "prod"
    RELEASE_WEBHOOK_DESCRIPTION: "Install it with:\n```bash\npip install hikari\n```\n"
    RELEASE_WEBHOOK_COLOUR: "0x5c2040"
  environment:
    name:
      prod
  artifacts:
    paths:
      - docs


###
### TEMPLATE FOR TEST AND PROD DOCUMENTATION GENERATION JOBS.
###
.pages:
  dependencies:
    - aggregate-coverage
    - bandit
  allow_failure: false
  image: python:3-stretch
  before_script:
    - apt-get update
    - apt-get install graphviz -y
    - pip install tox
  script:
    - tox -e docs
  artifacts:
    paths:
      - public

###
### GENERATE DOCUMENTATION WITHOUT DEPLOYING PAGES TO GITLAB PAGES.
###
pages-test:
  stage: pages
  extends: .pages
  except:
    - master
  dependencies:
    - deploy-to-staging

###
### PRODUCE PRODUCTION DOCUMENTATION.
###
pages:
  stage: pages
  extends: .pages
  only:
    - master
  except:
    - schedules
  dependencies:
    - deploy-to-prod
