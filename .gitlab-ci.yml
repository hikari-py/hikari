# Copyright Â© Nekoka.tt 2019
#
# This file is part of Hikari.
#
# Hikari is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Hikari is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Hikari. If not, see <https://www.gnu.org/licenses/>.

stages:
    - test
    - pages
    - deploy

variables:
    DOCKER_DRIVER: "overlay2"
    OWNER: "nekokatt"
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    ORIGINAL: https://gitlab.com/nekokatt/hikari.core


# Fixes a bug where CI now won't verify a branch before merging it and instead does nothing until the heat death of
# the universe or something.
.merge_request_testing: &merge_request_testing
    only:
        - branches
        - merge_requests
        - tags
        - schedules

###
### TEMPLATE TO RUN NOX AND SETUP.PY TESTS
###
.test:
    <<: *merge_request_testing
    allow_failure: false
    stage: test
    script:
        - python -V
        - apk add git gcc g++ make
        - pip install poetry nox virtualenv
        - mkdir public || true
        # Run the pipelines.
        - echo -e "\e[1;33mRUNNING TEST PIPELINES\e[0m"
        - poetry install
        - poetry show -v
        - poetry run nox -spytest
        - poetry run nox -sbandit
        - poetry run nox -spypitest
        - poetry run nox -sformat_check || echo -e '\e[1;31mFix your formatting, yo!\e[0m Run `black hikari tests` and push again :-)'
    artifacts:
        paths:
            - public/coverage/
    coverage: /^TOTAL[\s\d%]+\s(\d+(?:\.\d+)?\%)$/

###
### TEST IN PYTHON 3.7
###
py37:
    image: python:3.7-alpine
    extends: .test

###
### TEST IN PYTHON 3.8
###
py38:
    image: python:3.8-rc-alpine
    extends: .test

###
### TEMPLATE FOR TEST AND PROD DOCUMENTATION GENERATION JOBS.
###
.pages:
    stage: pages
    allow_failure: false
    image: python:3-stretch
    before_script:
        - apt-get update
        - apt-get install git -y
        - apt-get install graphviz -y
        - pip install poetry nox requests
        - git fetch --all --prune
        - rm public -Rvf || true
        - mkdir public || true

pages:
    extends: .pages
    script:
        # Build staging AND master.
        - source tasks/deploy.sh

        - git checkout origin/staging -f || true
        - git status || true

        - set-versions "$(python tasks/make-version-string.py staging)" || true

        # If staging is messed up, just ignore it...
        - nox -r -ssphinx || true

        - mv public staging || true
        - mkdir public || true
        - mv staging public/staging

        - git reset --hard origin/staging
        - git checkout origin/master -f
        - git status

        - set-versions "$(python tasks/make-version-string.py master)"

        - nox -r -ssphinx
    artifacts:
        paths:
            - public
    only:
        - master
        - staging


test-pages:
    extends: .pages
    allow_failure: false
    script:
        - source tasks/deploy.sh
        - set-versions "$(python tasks/make-version-string.py staging)"
        - nox -ssphinx
    artifacts:
        paths:
            - public
    except:
        - master
        - staging
        - tags
        - merge-requests
        - schedules

###
### HANDLE DEPLOYING TO PYPI REPOSITORIES
###
.deploy:
    allow_failure: false
    stage: deploy
    image: python:3
    before_script:
        - "[[ \"$CI_PROJECT_URL\" = \"$ORIGINAL\" ]] || (echo 'You are running off of a fork, so deployment is skipped.' && exit 0)"
        - apt-get update
        - apt-get install curl git openssh-client -y
        - pip install poetry requests
        - poetry install -v
        - poetry show -

###
### HANDLE DEPLOYING TO OUR STAGING ENVIRONMENT ON test.pypi.org
###
deploy-to-staging:
    extends: .deploy
    only:
        - staging
    except:
        - tags
        - merge_requests
        - schedules
    variables:
        RELEASE_WEBHOOK_NAME: "testing pypi (staging)"
        RELEASE_WEBHOOK_COLOUR: "0xd34615"
    script:
        - export RELEASE_WEBHOOK_DESCRIPTION="Install dev releases with:\n```bash\npip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple hikari.core==$(python tasks/make-version-string.py staging)\n```\n"
        - source tasks/deploy.sh ; do-deployment 


    environment:
        name:
            staging

###
### HANDLE DEPLOYING TO OUR PRODUCTION ENVIRONMENT ON pypi.org
###
deploy-to-prod:
    extends: .deploy
    only:
        - master
    except:
        - tags
        - merge_requests
        - schedules
    variables:
        RELEASE_WEBHOOK_NAME: "pypi (prod)"
        RELEASE_WEBHOOK_COLOUR: "0x5c2040"
    script:
        - export RELEASE_WEBHOOK_DESCRIPTION="Install it with:\n```bash\npip install hikari.core==$(python tasks/make-version-string.py master)\n```\n"
        - source tasks/deploy.sh ; do-deployment 
   environment:
        name:
            prod
