stages:
  - prepare
  - test
  - deploy
  - webhooks

_windows_test_job: &windows_test_job
  os: windows
  language: shell
  before_install:
    - choco install --no-progress python --version=${PYTHON_VERSION} -y
  script:
    - export PYTHON_COMMAND="py -3"
    - source scripts/test-job.sh

_linux_test_job: &linux_test_job
  os: linux
  language: shell
  script:
    # Inherit all enviroment variables into the docker
    #
    # This code will generate the independent arguments to inherit all the enviroment variables.
    # This is done instead of dumping `env` to a file and passing that to fix variables with
    # new lines.
    - ENV_ARGS=`env | sed -n '/^[^\t]/s/=.*//p' | sed '/^$/d' | sed 's/^/-e /g' | tr '\n' ' '`
    - >
      docker run
      $ENV_ARGS
      --mount "type=bind,src=$(pwd),dst=/hikari"
      "${PYTHON_IMAGE}"
      /bin/bash -c "cd /hikari && bash /hikari/scripts/test-job.sh"

jobs:
  include:
    # Testing
    #
    # On Windows, we install Python from choco.
    # On Linux, we use Docker to get the specific version we want, as Travis
    # is no where near as quick to add newly released versions of Python to
    # their repos for these jobs as the CPython docker team are to make releases
    - name: "Windows 10 CPython 3.8.5 AMD64 Tests"
      env: PYTHON_VERSION="3.8.5"
      arch: amd64
      stage: test
      <<: *windows_test_job

    - name: "Windows 10 CPython 3.9.0 AMD64 Tests"
      env: PYTHON_VERSION="3.9.0"
      arch: amd64
      stage: test
      <<: *windows_test_job

    - name: "Windows 10 CPython 3.10.0-a1 AMD64 Tests"
      env: PYTHON_VERSION="3.10.0-a1"
      arch: amd64
      stage: test
      <<: *windows_test_job

    - name: "Linux CPython 3.8.5 AMD64 Tests"
      env: PYTHON_IMAGE="python:3.8.5"
      language: ruby
      arch: amd64
      stage: test
      <<: *linux_test_job

    - name: "Linux CPython 3.9.0 AMD64 Tests"
      env: PYTHON_IMAGE="python:3.9.0"
      language: ruby
      arch: amd64
      stage: test
      <<: *linux_test_job

    - name: "Linux CPython 3.10.0a1 AMD64 Tests"
      env: PYTHON_IMAGE="python:3.10.0a1"
      language: ruby
      arch: amd64
      stage: test
      <<: *linux_test_job

    - name: "Linux Stackless Python 3.8.0 AMD64 Tests"
      env: PYTHON_IMAGE="davfsa/stackless-python-hikari:3.8.0b3"
      language: ruby
      arch: amd64
      stage: test
      <<: *linux_test_job

    - name: "Linux CPython 3.8.5 ARM64 Tests"
      env: PYTHON_IMAGE="python:3.8.5"
      language: ruby
      arch: arm64
      stage: test
      <<: *linux_test_job

    - name: "Linux CPython 3.9.0 ARM64 Tests"
      env: PYTHON_IMAGE="python:3.9.0"
      language: ruby
      arch: arm64
      stage: test
      <<: *linux_test_job

    - name: "Linux CPython 3.10.0a1 ARM64 Tests"
      env: PYTHON_IMAGE="python:3.10.0a1"
      language: ruby
      arch: arm64
      stage: test
      <<: *linux_test_job

    # Linting
    - name: "Linting"
      language: python
      python: 3.8
      os: linux
      arch: amd64
      install: "pip install nox"
      stage: test
      script:
        - python -m nox --sessions safety mypy flake8

    - name: "Twemoji Mapping Verification"
      language: python
      python: 3.8
      os: linux
      arch: amd64
      install: "pip install nox"
      stage: test
      script:
        - python -m nox --sessions twemoji-test

    - name: "Test building pages"
      if: tag IS NOT present
      stage: test
      language: python
      python: 3.8
      arch: amd64
      os: linux
      install: pip install nox
      script: nox --sessions pdoc3 pages

    # Deployments
    - name: "Deploy new release"
      if: tag IS present AND tag =~ /^\d+\.\d+\.\d+(\..*)?$/
      stage: deploy
      language: python
      python: 3.8
      arch: amd64
      os: linux
      script: bash scripts/deploy.sh
      env:
        - secure: "jiD7P2ywpX5gcEBo+EsuI0+2MJxA4yMX62RsQEBUG9ry52vqXTWuVdhhSykZF3d81vKMjl3B0u2eGQx2ubZOhVSyHynW39+sIv4q0gtHesbexUyALQi3S144Qk6ftovEZBFYTvyUgBchxp8o5ESnahGZR+V1BmKESfzAvwdLfwMZtiWYH11qobn+hn4HEHLID/KIuAvufI11EEUyAD6O7uUOiebv83gT60zRJqZuRHOinvXCXEoQANu++VRloyQ7TuyTY8uf50m5IdjuKuQq28CzRsMZ2daV5le9rfaWGVrJYSpum54qFuAv/302uJwUr6bIMAC9ewQFeKWT8PoepkvREFcetNfhVZnvOPn5YoQaU0Vs/U3iAQ0Q/4lZG+5GS1JLoO9OTn20Z71FCEe+Cd34UVE6Pu8LSXQK00VrxWAyFFp22R/Xz9STjfeqvdZ7lJSv8U5wXABHyF7gU5ACkQ3u/wTSxoUS8D00mDOLSShwng6RjX6cqLgxXopxYUFa5hmm3ClZNAhi9tkJwONH9gwzeTYnUb9wzSewSElxUnPCd3YIrKJuu9thqtN80QM20JX58PK4ZDZBGAlEVxRzMrE5gfvSf7r5ap3hZODxpS7/32p8fmvqEtI7RQjlg8Ds5qbVZODr1KuAhlkotf1FtMmjoaxH4uOCOtvbWwbjLno="  # tu
        - secure: "k2AagtuvBcFYH1g8PANjgCnwJqMAxUJjGsNKCXX6hwsPykhPifqCGbwi7v6J69hdyV99aCyVEYQ4ZcLvWFm5UPeg7qyf8G+QV2X8gC4aswJ7HuJfxphcMDJ9ZnhTqOZNtSQ5gqF48UWM64x0ULFm2wadELu/e+0t8X3Bs+7UCsvCi2IxREiL0avOxCa8qSEcWZHbvBBTGG/13nNmTS4dIlX2wL6u2uNz/dYYtgo5F8pQYuOPZqu+eoHeeP5t5Q7d2R9vZBs71qa+urbgCYXFiz5TP3gqN9hLMjITQo0+WgT7T3JqrFMVQ+tWqJhOdk0/AD8giUgxe9/TU6WnxmLF5e5dbQJjCDvnVM/MccbwHxnwK42Kfg6SMoVUyUkZU8g31lpEdJYTNb3k2JQVTjEX/hjSyQmDdyVif9b9elhkWbFAESDy6twOocZwcjOf4PA+VZg7X4AjsMN2HMWs1AwZ7vBOU31at/cGVM8nlHiFh5R8u2KSMd9CDEJtKiedsclzGoVO78HAY7C6Ux+QX7hIURWNHVfJa5TX0oHkBClkizRQ0R7FnS/Xn1Se/gdUFtea7JjDbN4cDMLloOkbAfzuOqugzapFLIfmaIZOFS0CxsMlXtYVSJe9ffLi7PxfqGMN3s3ruQecv1TKOJKK3v26C6lGvbO8CXRXU7J7LmsWUK0="  # tp
        - secure: "evyqxufi8qYKAYqiSsNIOxM75eG4rTVJWCEMwC/4jIQJBXy6hiP0GDuHWmfXR/jU4g5X2yGFlq6bTPi+ra7pI+91h3yJ0pkaBH/cw+38j6wFK1bL8N5gN19CBuNxiLU//pIbRL2rDocEDG217alupA61CewuDQ4gLLfWoJhmZgQG3FbU0IY3+kQqYXUMt3w99lGia3kG9DOxIMsjg5geVPn1F1XZH+8Ppa66UqJYeN/rwUpJ8U8D1UP5FCG9nxBNbd9WmXiMEy8icax+fZbfAuYew3lmHApiGI9jM7013Q00m/pZk/HOq6Nt89Bwe8wFsArDE7YYPgMPWTJR5IT+tXYOVZceXOkT61qHMwxBTtcF7dCikiV5pgndhXP2uuy4d/efeKk3uzwzNA3RocwwdL4lBtpvzklpT4XjhUncZK/SiLgB9FY7WTV0DuXt9F2M2eWhJwtMlD/DLZWgpqRe3vQc9/JM1QWKlpJR3Ws91cJKyoV1PukEwILlYqD73y1SDpu3pB2eFNvT29lkAvS4RLKs0fLt4yxeR3Fbq82sebmDE5qcRbQhjdUnmnuf69uVZnvJ3/w1DRLhQozD+EPg7G6j5Ww/QDQxZ7kHVuka9wWLvajZd0Zq1zcDr90JaqhmRW6mi5VBYid57ua3nH+yRj8Bu0k/VEjDaPvXo9Sb7ys="  # ght
        - secure: "pyvVl2hvUEP55UUr+8yFynAFUKyTTXpfjtCE5HFyXLQb20r6fTkCP3+Oi8YkktdQdKfwHZ6P8rbg3NQSllX0aSCdjiKklHPpev5fs/0XIYUsOYXZE7fFNk7u9o0WpygnkRM+kSv7RaPVck5kqX/dgD6dEggEPPVCVujZZiz33pPIPKuRbr89qsdQf3KKqdQ4XH0frqUbvVX6OEejFGMV4kNgip9er+ci1XSXO0OVJJg0zZ+8DOJPogY8C1DTVJabKlHsfQIX9eAFYeEcdwMkssuvCoRBbQ5uJXCyM+rFLC7IkuYbZkyPOUJcKrf/WlVBskd44F8iyW1dEfgVZHoFy//tUEuBwtYXfV1l2zvcO0t30GBykA4io21C9AKWWHrtamFDc0u+6VYYtjdw77E/CFyrh0bYoUOPfOyObFf6VZJFiMdaDJ2eh7SzhVM/7vIo5xOCskwnWCfroUUWntPAF0GdAcsTXCWON4Hhz61FnROAC6M11OmOPjLQMraGYkaGw6AKI1GEg4onjr+BNau4kLUgzsrXWpK/zvlNubTs7wdL4QAsEqJPVaf0HX9YRFfokhTksao4ttZFt8/Jz9MUDsGqbzsvUvuy0uLtmrKsCQmzIRNavZr2mCmINIM9h2jomTitaQHDra0YlYKsBJmaHrT/55se2/bznyX7AfxQEfI="  # dwh


    # At the time of writing, Stackless Python does not have a publically
    # accessible Docker image for Stackless Python 3.8.0. This means we have
    # to manually build one and publish it in order to be able to use it
    # from the other steps.
    #
    # Since this is somewhat slow, make sure to do this on a cronjob.
    - name: "Build Stackless Python 3.8.0b3 image"
      # Perform
      if: |
        fork = false && ( \
          env(TRAVIS_EVENT_TYPE) = cron \
          || commit_message ~= /;;rebuild containers;;/ \
          && branch = master \
          && tag IS NOT PRESENT \
        )
      env:
        - DOCKER_DRIVER="overlay2"
        - DOCKERFILE=pipelines/docker/stackless-3.8.0b3/Dockerfile
        - IMAGE=stackless-python-hikari:3.8.0b3
        - secure: "MSJRZSTvB5MCIcjqYk1Pr7fUL4sCVOboOXCwUoM/Efi4Ez0khEeiGQS0KoewCgoapArHVAKL/xSQek8nBdcejvvXUSzl+YVku9pRq901cgnX3UmISmE5naEWkGW4nFjnTuiLEGKiLof77Uol5aLqUjefG7fKk4mu1vhoQigWbBvIShrpZ8LO+7Dr4dpgIAAuIeDCpkhQMqMGJmRx+6PSUhL+sPdw1xXAU5yiq97lB+CdiAHO4NyrsYPi5B2ID6SfqItpizLcFvHQDIXjk7CT0DynlMJFnoOOHhoYBHdwFSNyc3eDMukzjTGiGeDBXl/MSwOmqyJgI1Ig/VyLFolm3suhzN+vrgLSkon9Mhl3D1+mheT4EVC8wpIncRUtig9+BFBgGukaQlbz/psWyF8VA4sWz8Fe0/jqDxeXAsWVY0B7IWgbGUuHIBbZmInHmzo2Z1MnDKA0w81uiNJxaneswfK7T4qF0jNMp/mnlu0skyKnnIfF81XID4c1KMgjWHznVetPafi/kgc/hYKg9BYdDnypOK6uXYoHSGDNNmrApufwzEiSfmRrgc0Mi1LSbv9yfSftfwlybNCZKZ9QMdi6FdeF5XqJTWkZveP2O5RKA7+To2XktARspQ6kvfcjZHTpmlUtDQAxbYmh1Yv/d3U6op3+l7F4dKro9N/t4gQ8vRc="  # du
        - secure: "UpDTgaNb4UTkwhOyPhI6HOpiJmUBcSWIpCwBNcLGpqqfr8jkjjEO8a3lqHDI6PzRBoX4fC8/r7b8ubVLT6Dd2s8FwIVIc31vjpkacsqguo/N1WKoxoU5KAzcMVmv/CGax6btb0cOWD3rQ6RFjdpnkPl/NZlSbcuGdBqYlKSPEZ0ohXy4P9vDxKEk9qXurFY645kD2ghPQV10cs0Hs4KdrwVCCLqXo+oIoiZUsIpKvcEwz74k/QgkvD6duPk4M2vmjbOtmJJ8X6U3U6/3ppHVQBsudUN4Y7jVp+rpcMx7e4kA/izfn0O5BPYLWIWaPj7QNIpvpGjUxgGxQBmMeoRdahaZ10YoqihodiZYy/KC7qQD9eP8Fjo8ZSQHPV6CWg+c1PtoACganhtYe8NJBGGrOt8xe+fSVselSxvtPhDLfVufUZ3oVRT99s4RcBBuRBFSyCoM5B+4RnpM5yA0uHK/Kq0eOMfn1cS6sk01jYr/wVueNhr/IgCfI32yzTOnkTEkZDPgk53nASDXeDsRVmfE6TWbL7Odnh4+6H6zV4lleV9eXBwl+3W+j3Afte8Kmf/VBK9M4i7dRAsc3Kd82LZFlQ5dhAENmfGJPVFM/jc+escbl1XJKv/bUp48jvdUYoMIWiFbqBwjhM67Xj+OY01EDTuPv9zwBPJBoEBaXFok0CY="  # dat
      stage: prepare
      before_script: docker login -u "${DOCKER_USER}" -p "${DOCKER_ACCESS_TOKEN}"
      script: docker build -t "${DOCKER_USER}/${IMAGE}" --file "${DOCKERFILE}" .
      after_script: docker push "${DOCKER_USER}/${IMAGE}"
