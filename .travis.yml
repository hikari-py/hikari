stages:
  - test
  - deploy
  - webhooks

cache: pip

_test_job: &test_job
  install:
    - ${PYTHON_COMMAND} -m pip install nox
  before_script:
    - mkdir public > /dev/null 2>&1 || true
    - ${PYTHON_COMMAND} -V
  script:
    - ${PYTHON_COMMAND} -m nox --sessions pytest
    # Use --cov-append to make sure coverage covers speedup and non-speedup execution paths equally.
    - ${PYTHON_COMMAND} -m nox --sessions pytest-speedups -- --cov-append
  after_script:
    - bash <(curl -s https://codecov.io/bash)

_windows_test_job: &windows_test_job
  os: windows
  language: shell
  before_install:
    - choco install --no-progress python --version=${PYTHON_VERSION} -y
  env:
    - PYTHON_COMMAND="py -3"
  <<: *test_job

_linux_test_job: &linux_test_job
  os: linux
  language: python
  env:
    - PYTHON_COMMAND=python
  <<: *test_job

jobs:
  include:
    # Linting
    - name: "Linting"
      language: python
      python: "3.8.5"
      os: linux
      arch: amd64
      install: "pip install nox"
      stage: test
      script:
        - python -m nox --sessions safety mypy flake8

    - name: "Twemoji Mapping Verification"
      language: python
      python: "3.8.5"
      os: linux
      arch: amd64
      install: "pip install nox"
      if: env(DISCORD_EMOJI_MAPPING_URL) IS present
      env:
        - secure: "BjD5A9s8GCC/ighdYW143rLeKxs+ltNB6ibzMCEcKi+TffvMJ9oLbNM0q1jTs+Jw9YOzIr07d9hOTbc41IVQBqjwNzqBQo37dTp/JPLl1bI579gfOZJ5POg0AT+FX9VpM2qYVxNPYASX/2v03EVmtLEAVXdg37NnUzbx4H5BBjei9tcUOlhm7Mt0o5s4tx/XyNxfDNtUah4rg6FCvhaBza2oApiBxR/3dWEr4/pFLXXqh8fCtUfLtgv+zt8P4VZxgWn33hsfxuqqBattbK+aOaARHDvQe73p2xy9INWgmiKNcM1lgpiFGsgSa4HpfYo/oUqP/dLULUocloIPTqMHOpWcQSRHACd0UUkOv6ZiB63NahQOxAxOfPpIGLdf6JSb2huPNGgmg6gqewKHmRcqWghgJfnXoKKdKK3tFG8+jBbw0Rmi8NHg5xJVsfUDt8utkRceBb13WcirTdam9r/kWo5Ogy+jEdbDX5R8OFimq+uzDdsjnI+BuakphLScxW6wo+iibDOkIulsKk6xhgIXzCi1uT2KJkIBkX3zxNdRlMtZS7rC6uz3xgF4I9o756CiT85vlKBaQroBj/2fYfU+d2wYwVFtFVGopqVpTaSQidZaAVZzJNWTXov/aOAK/e55VwEssu22keS/p7g2+6dogUJjO+qswupB+dvcnVJlnNk="
      stage: test
      script:
        - python -m nox --sessions twemoji-test

    - name: "Windows 10 CPython 3.8.5 AMD64 Tests"
      env: PYTHON_VERSION="3.8.5"
      arch: amd64
      stage: test
      <<: *windows_test_job

    - name: "Windows 10 CPython 3.9 Dev AMD64 Tests"
      env: PYTHON_VERSION="3.9.0-rc1 --pre"
      arch: amd64
      stage: test
      <<: *windows_test_job

    - name: "Linux CPython 3.8.5 AMD64 Tests"
      python: "3.8.5"
      arch: amd64
      stage: test
      <<: *linux_test_job

    - name: "Linux CPython 3.9 Dev AMD64 Tests"
      python: "3.9-dev"
      arch: amd64
      stage: test
      <<: *linux_test_job

    - name: "Linux CPython 3.8.5 ARM64 Tests"
      python: "3.8.5"
      arch: arm64
      stage: test
      <<: *linux_test_job

    - name: "Linux CPython 3.9 Dev ARM64 Tests"
      python: "3.9-dev"
      arch: arm64
      stage: test
      <<: *linux_test_job

    - name: "Linux Stackless Python 3.8.0 AMD64 Tests"
      language: ruby
      arch: amd64
      stage: test
      script:
        - >
          docker run -it \
              --mount type=bind,src=$(pwd),dst=/hikari \
              nekokatt/stackless-python-hikari:3.8.0b3 \
              /bin/bash -c "
                  set -e
                  cd /hikari
                  pip install nox
                  nox --sessions pytest
                  bash <(curl -s https://codecov.io/bash)"

    - name: "Test building pages"
      if: tag IS NOT present
      stage: test
      language: python
      python: "3.8.5"
      arch: amd64
      os: linux
      install: pip install nox
      script: nox --sessions pdoc3 pages

    - name: "Deploy new release"
      if: tag IS present AND tag =~ /^\d+\.\d+\.\d+(\..*)?$/
      stage: deploy
      language: python
      python: "3.8.5"
      arch: amd64
      os: linux
      script: bash scripts/deploy.sh
      env:
        - secure: "ICEfUzrf35MnvzctBV7t54a98zF08Csx4BR2d+oNZsgNcUyDZu9EwyixaI60/tLYNJU5B7O2EpJI5gcLjFbbdcxFy9SRl7bU/TlmNFMZIFcW/6pfZEt/kXQLenV56WYgKVVoDucejVTrlNaPtJ5bLXPdTAOIyhmA48AzjvxP20gbcsmf11kkd6kCPYWbSK8GGgN4oFAjnD7iDtnaV44VgQ67g9EgbegwlhkInMlQt/xCxlWoRNdBmCFNp20Oh9IzqxlRXdcwif/DJybIXutvmcQh5QeYeB9Kc/uX67BS+qDGmXT5IaAoUh13mXu4B7lOeziQ6I4mLsBPfq3U7sbyi1V8P54n49kuOfyFun97+X01TsaO40LJU0I7sfA4Z97djF8nnbjSpQW80dciOWlzNmNfz3e5aKF8Mn9V9wW7KXz0dEXqwu49oRKTDpRTdzHx17H8FbkUIMPOoV/lEE8pvWRH/QTtmnes9/VsXHYhBQWxtTJwGSgQ314lpboBdOSnBVW+lq1qI6sGnduutb9BYO9nOREANFwuriX4eBMl9DN+JtdpcEEKX7xJ6352gJUO7rKMDio1NUWlY5H+yKLqkHlxfpfpRc2IJrl0Wz0M6lEDy5gLVVx/dVbSOcudRdSxtbwNTrrXQu1TcV4tomgMLYitzSQxkqCakn8NQsSCOYE="  # tu
        - secure: "pI5dipgdH406T7E4rylGI61COcAsNPjCW3gIQ++FEZH8knlqoSWMVAPXy5+NcNMvjnvIqy/N4bIpCjTcZx6CzX6UrpJJLejrclgYgH5wO/ntxFBpnmhUtA34qUjiomQLZb13qL2Fhs8ukLHnjhJJ0gsu3PAiOGxhLWSU2G8Rdh6BTtMPWd2zhM6HLE6odzYFvEQqDEgpQSGylbN/ah32H/HrvCP9X2bcBmHB8zLBtVRfZD96YeJ+/wyHI6RraBUh2tggw3WvUmXsOzknBjjRs0/IewNH0v78jWCZaOIRG9M4MT2COaNpgIi/iVDmN3P5CVzersoZBXa6c7PcuqEceMO4XYpeQ5h6i70c0Cs39SOi2roPlgx9FLfR2H9o93dyYz0vACJikFq4B9COXphIAXU28sA5ZZv/kEyFXr65flP7wVidEqN8T1U23wGrPz3s6k/nLi8F+6etwFG8bSy3heQe2MAtSkeKsOXqrHKC1d+DYPYxZabLJIKM87qVRceNGJ3BReyEQ4Ifw+c3PF/z4E6r9GOMiMqs73VCvDJ9CnMmwvq79tTK1avNsdnyQYBPRDbq45J98RTNFgQCTkjuQY6d7hxqXJaYEW8J1kpmRHE9tIEI6f41Cy2rUCvfzZzPtg14cX0iyK23hyaWWqX0IiEi/A2GS2+1cvFnmD/Ldh0="  # tp
        - secure: "K58TiRut4zgC34Mi3q1G9kvRWFw8TmYNk/YpstFo58dMw0By9CAXY0gAaywyPONVrnY5WVcGuXrPKQLCnVwzRWVT56jUIVnWClcbc/W1XG9whlzl52nssRG6wmo8wVQl9w3Csm2pEsNM9Th7ka3kZTHiV8tKmuscSjdQfEEfNHkE14D6oflsKa78LpD0BfzeJh1e8K3Y/K7P5sZOjdiOzCCnm7mGtQXYlSgxjwU8GkgZtDDtVpaY7uTHXnlDCvLAXSD1nxQarNy8rLVnTeetfFibZRSDeiqQHodQ6tBZRljsqc8zwbJsp8vZ2v3xeXvCMw+wjjTpRM7N6NIex/G80npnosKh7eIIdmC0tpEMhbUgbVjIY+LfgdtfbFYTdNuhOnNm4JB2X8U89Lwj5eat7Ji5z11LssxB6WVCpryDBdLktGiswy79NQ3M2LBdlL2l6FdlS/2wgOgsoKwh4jAh13UO2k+QFW3/epifn+xsqTFv0m+3i3L9gUidAY1SZqQ++LHZIcIk7Y8Ypl3qQNNt0Lgvx34f4BDRJXNr0Gd166e44XGRI/yI6bV39TN4/BhTsssUilqQziVgadBbRdQUT+xgjHGtj+yGu3qWIXD96nXLNAXWWYm4efN8+QEq3jylOwlLNAdEIjMx1tXxlgWOwMIQtt/D6UeoYyiLaZamYmQ="  # t
        - secure: "nOfWepKzhzYm0L8Mq/D3crBiHkAVrcn+AOdlNUVz3nKiWw646T1AAIaQ+lSclziZqV0r2dIeKe6hF994n8MWg05xDlf/xfhmO0PG7eTKclSWxWgq10vdM8XTgWg/2IJd/CYCS1rN6+/o0fXkZeRbPxrPa0qZFc/4fG3/m20zrpGn7LRATSPE3JJX0YFY9bddbCY3RCHIoX32gQI+n+QMczrfaWWyUuXac9k4C/RW3DmB3mVpML7dmbWg0Dr5uh9pJI5csM+apIvYksMAI8PBWIIIeEd83J44e1f5oXyHIcI+Pf+fu4expNyDi8emu5T5Dl998LC1j6NSkqxVKeXHuFFlkNVclPCNknBR3X5YD5UCydwYS8JNP+ut5WwOiBV3N/Pr4km5YzHyJkynUcTXC4PKqBBFZ7xAktwkPWl6zx6UKjLdSg+tDQkHbaA7B/OIWSJIpK0XypK3boRMI7TUiuVgzrolimz3dfE7/EHlHhjhqiDoopvwX0S9O1rXRVL1kvDO/Kl91WcYBkftXqRAbAWMgTVurwJw1LXaaCqe20jEKu8Bnc10PKI5Khe/iAJ+4CeEifJBpXU6lFIMhGquskkRTvxMatUv2jG0F1X1AEH4lCZpYP8eDRI/pBJQmbivrswZX9NSBJyN74W95Z0yN1jZP6OAxeVuSf6pgyK5Scg="  # dwh
