# Copyright Â© Nekoka.tt 2019
#
# This file is part of Hikari.
#
# Hikari is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Hikari is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Hikari. If not, see <https://www.gnu.org/licenses/>.

###
### TEMPLATE FOR TEST AND PROD DOCUMENTATION GENERATION JOBS.
###
.pages:
    cache:
        paths:
            - $CI_PROJECT_DIR/.pytest_cache
            - $CI_PROJECT_DIR/.nox
            - $CI_PROJECT_DIR/.venv
            - $CI_PROJECT_DIR/.cache/pip
            - $CI_PROJECT_DIR/poetry.lock
        key: $CI_COMMIT_REF_SLUG-$CI_JOB_STAGE-$CI_JOB_NAME
        policy: pull-push
    allow_failure: false
    image: python:3.7.5
    before_script:
        - rm public -Rvf || true
        - mkdir public || true
        - apt-get update -q  # graphviz won't resovle without this???
        - apt-get install -qy git gcc g++ make graphviz
        - "git log -1 --pretty=%B | grep -iq '\\[skip pages\\]' && (echo 'Page generation was skipped by commit message.' && exit 0)"
        - >
            if [[ "${CI_IS_SCHEDULED}" -eq "1" ]] || [[ ! -d .venv ]]; then
                echo "Installing new venv and installing poetry inside it."
                rm poetry.lock .cache/pip .venv/ .nox/ .pytest_cache/ -Rf || true
                pip install virtualenv
                python -m venv .venv
                source .venv/bin/activate
                pip install -U pip
                pip install poetry
                poetry update
            else
                echo "Reusing existing venv."
                source .venv/bin/activate
            fi
        - source tasks/config.sh
        - git fetch --all --prune --depth=1

pages:
    stage: pages
    extends: .pages
    script:
        # Build staging AND master.
        - source tasks/deploy.sh
        - git fetch --all --prune

        - git checkout origin/staging -f || true
        - git status || true

        - set-versions "$(python tasks/make-version-string.py staging)" || true

        # If staging is messed up, just ignore it...
        - nox -r -ssphinx || true

        - mv public staging || true
        - mkdir public || true
        - mv staging public/staging

        - git reset --hard origin/staging
        - git checkout origin/master -f
        - git status

        - nox -r -ssphinx
    artifacts:
        paths:
            - public
    only:
        # Ignore master, I added a workaround because pages were not renewing on master due to the mid-pipeline
        # merge that takes place. The workaround reruns the staging pipeline after the merge but does not deploy
        # to pypi, only running the pages.
        # - master
        - staging


pages-dry-run:
    stage: test
    extends: .pages
    allow_failure: true
    script:
        - source tasks/deploy.sh
        - set-versions "$(python tasks/make-version-string.py staging).${CI_PIPELINE_IID}"
        - nox -ssphinx
    artifacts:
        paths:
            - public
    except:
        - master
        - staging
        - tags
        - merge-requests
        - schedules
