# Copyright (c) 2020 Nekokatt
# Copyright (c) 2021-present davfsa
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
[build-system]
requires = ["hatchling>=1.14"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "hikari/_about.py"
pattern = '__version__: typing\.Final\[str\] = \"(?P<version>[^\"]+)\"'

[project]
dynamic = ["version"]
name = "hikari"
description = "A sane Discord API for Python 3 built on asyncio and good intentions"
requires-python = ">=3.9.0,<3.14"
dependencies = [
    "aiohttp~=3.11",
    "attrs~=25.1",
    "colorlog~=6.9",
    "multidict~=6.1",
]
scripts = { "hikari" = "hikari.cli:main" }

license = { text = "MIT" }
readme = "README.md"
authors = [
    { name = "Nekokatt" },
    { name = "davfsa" },
]
maintainers = [{ name = "davfsa", email = "davfsa@hikari-py.dev" }]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Communications :: Chat",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries",
]

[project.optional-dependencies]
speedups = ["aiohttp[speedups]~=3.11", "ciso8601~=2.3", "orjson~=3.10"]
server = ["pynacl~=1.5"]

[project.urls]
"Documentation" = "https://docs.hikari-py.dev/en/stable"
"Source (GitHub)" = "https://github.com/hikari-py/hikari"
"Discord" = "https://discord.gg/Jx4cNGG"
"Issue Tracker" = "https://github.com/hikari-py/hikari/issues"
"CI" = "https://github.com/hikari-py/hikari/actions"

[dependency-groups]
nox = ["nox[uv]==2025.2.9"]

audit = ["uv-secure"]
codespell = ["codespell==2.4.1"]
coverage = ["coverage[toml]==7.8.0"]
mkdocs = [
    "mkdocs==1.6.1",
    # Mkdocs Material
    "mkdocs-material[imaging]==9.6.11",
    # Docstring parsing for API reference
    "mkdocstrings[python]==0.29.1",
    "griffe-inherited-docstrings==1.1.1",
    # Generate API reference pages dynamically
    "mkdocs-gen-files==0.5.0",
    "mkdocs-literate-nav==0.6.2",
    # Minify
    "mkdocs-minify-plugin==0.8.0",
    # Towncrier draft changelogs
    "mkdocs-towncrier==0.1.4",
    # Image viewer ext
    # "mkdocs-glightbox==0.3.7",
]
mypy = ["mypy[faster-cache]==1.15.0"]
pyright = ["pyright==1.1.398"]
pytest = [
    "mock==5.2.0",
    "pytest==8.3.5",
    "pytest-asyncio==0.26.0",
    "pytest-cov==6.1.1",
    "pytest-randomly==3.16.0",
    "async-timeout==5.0.1",
    { include-group = "coverage" },
]
release = ["twine==6.1.0"]
ruff = ["ruff==0.11.4"]
slotscheck = ["slotscheck==0.19.1"]
towncrier = ["towncrier==24.8.0"]

[tool.uv]
required-version = "~=0.6"

[tool.coverage.run]
relative_files = true
parallel = true
branch = true
timid = false
source = ["hikari"]
omit = ["hikari/__main__.py", "hikari/cli.py"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
sort = "cover"
exclude_lines = [
    "\\#\\s*pragma: no cover$",
    "^\\s*raise AssertionError$",
    "^\\s*raise NotImplementedError$",
    "^\\s*return NotImplemented$",
    "^\\s*raise$",
    "^\\s*pass$",
    "^if __name__ == ['\"]__main__['\"]:$",
    "^\\s*\\.\\.\\.$",
    "^\\s*@abc.abstractmethod$",
    "^\\s*if typing.TYPE_CHECKING:$",
    # Whatever is in inside `if not typing.TYPE_CHECKING:` is expected to be tested, but the branch will always run, making
    # coverage think that its only partial
    "^\\s*if not typing.TYPE_CHECKING:$",
]

[tool.pyright]
include = ["hikari", "examples"]
exclude = [
    "examples/simple_dashboard.py",
    "**/__init__.py",
    "hikari/internal/enums.py",
    "hikari/internal/fast_protocol.py",
]
pythonVersion = "3.9"
typeCheckingMode = "strict"

reportUnnecessaryTypeIgnoreComment = "error"
reportMissingTypeStubs = "none"
reportImportCycles = "none"                  # Doesn't account for TYPE_CHECKING
reportIncompatibleMethodOverride = "none"    # This relies on ordering for keyword-only arguments
reportOverlappingOverload = "none"           # Type-Vars in last overloads may interfere
reportIncompatibleVariableOverride = "none"  # Cannot overwrite abstract properties using attrs

# Attrs validators will always be unknown
# https://github.com/python-attrs/attrs/issues/795
reportUnknownMemberType = "warning"
reportUntypedFunctionDecorator = "warning"
reportOptionalMemberAccess = "warning"

[tool.pytest.ini_options]
asyncio_mode = "strict"
xfail_strict = true
norecursedirs = [
    "docs",
    "*.egg-info",
    ".git",
    "tasks",
    ".nox",
    ".pytest_cache",
    ".venv",
    "venv",
    "public",
    "ci",
]
# Treat warnings as errors
filterwarnings = [
    "error",
    "ignore:.*assertions not in test modules or plugins will be ignored .*:pytest.PytestConfigWarning",
]
required_plugins = ["pytest-asyncio"]
asyncio_default_fixture_loop_scope = "func"

[tool.towncrier]
package = "hikari"
package_dir = "hikari"
directory = "changes"
template = "changes/.template.md.jinja"
filename = "CHANGELOG.md"
issue_format = "[#{issue}](https://github.com/hikari-py/hikari/issues/{issue})"
# We use these values for headers in the template
underlines = [2, 3]
type = [
    { name = "Breaking Changes", directory = "breaking", showcontent = true },
    { name = "Deprecation", directory = "deprecation", showcontent = true },
    { name = "Features", directory = "feature", showcontent = true },
    { name = "Optimizations", directory = "optimization", showcontent = true },
    { name = "Bugfixes", directory = "bugfix", showcontent = true },
    { name = "Documentation Improvements", directory = "documentation", showcontent = true },
]

[tool.mypy]
# general settings
strict = true
check_untyped_defs = true
enable_error_code = "explicit-override"
incremental = true
namespace_packages = true
no_implicit_optional = true
pretty = true
python_version = "3.9"
show_column_numbers = true
show_error_codes = true
show_error_context = true

# stuff to allow
allow_untyped_globals = false
allow_redefinition = true

# stuff to disallow
disallow_untyped_decorators = true
disallow_incomplete_defs = true
disallow_untyped_defs = true

# warnings
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = 'rillrate.*'
ignore_missing_imports = true

[tool.slotscheck]
strict-imports = true
require-superclass = true
require-subclass = true
exclude-classes = """
(
    ^hikari\\.internal\\.enums:(Enum|Flag|_EnumMeta|_FlagMeta)$
)
"""
